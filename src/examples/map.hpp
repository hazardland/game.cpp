#ifndef TEST_SCENE_PERLIN
#define TEST_SCENE_PERLIN

using namespace std;
#include <vector>
#include <map>

#include <game/scene.hpp>
#include <game/text.hpp>
#include <game/map.hpp>
#include <game/terrain.hpp>

int WIDTH = 128;
int HEIGHT = 128;

class MapScene : public Scene {
    using Scene::Scene;
    Terrain* terrain;
    Map* map;
    TTF_Font* font = TTF_OpenFont("assets/fonts/titillium.ttf", 20);
    vector<Tile*> tiles1;
    vector<Tile*> tiles2;
    Text* fps;
    int ticks;

    public:

    virtual void prepare() {
        fps = new Text(renderer, font);
        
        terrain = new Terrain(renderer, WIDTH, HEIGHT, 2);
        
        map = new Map(
            new Image(renderer, "assets/sprites/winter.png"), 
            32, 32, 
            WIDTH, HEIGHT, 
            3,
            new Text(renderer, font)
        );

/**

"1.1.1.x" = {0},
"1.1.x.x" = {1},
"1.1.x.1" = {2},
"1.x.1.x" = {28},
"x.1.x.1" = {30},
"1.x.1.1" = {56},
"x.x.1.1" = {57},
"x.1.1.1" = {58},
"x.x.x.1" = {3},
"x.x.1.x" = {4},
"x.1.x.x" = {31},
"1.x.x.x" = {32},
"x.1.1.x" = {59},
"1.x.x.1" = {60},
"1.1.1.1" = {5, 6, 33, 34}

"2.2.2.x" = {84},
"2.2.x.x" = {85},
"2.2.x.2" = {86},
"2.x.2.x" = {112},
"x.2.x.2" = {114},
"2.x.2.2" = {140},
"x.x.2.2" = {141},
"x.2.2.2" = {142},
"x.x.x.2" = {87},
"x.x.2.x" = {88},
"x.2.x.x" = {115},
"2.x.x.x" = {116},
"x.2.2.x" = {143},
"2.x.x.2" = {144},
"2.2.2.2" = {89, 117}

"0.0.0.1" = {168},
"0.0.1.1" = {169},
"0.0.1.0" = {170},
"0.1.0.1" = {196},
"1.0.1.0" = {198},
"0.1.0.0" = {224},
"1.1.0.0" = {225},
"1.0.0.0" = {226},
"1.1.1.0" = {171},
"1.1.0.1" = {172},
"1.0.1.1" = {199},
"0.1.1.1" = {200},
"1.0.0.1" = {227},
"0.1.1.0" = {228},
"0.0.0.0" = {173, 174, 201, 202, 229}


*/
        tiles1 = {
            // Water
            new Tile(
                0,
                {51, 51, 255},
                // Base water
                {
                    319, 320, 321,
                    319, 320, 321,
                    319, 320, 321,
                    319, 320, 321,
                    322, 323, 324
                }
            ),
            // Ice
            new Tile(
                1,
                {102, 178, 215},
                // Base ice 
                {
                    331, 332, 333, 334,
                    331, 332, 333, 334,
                    331, 332, 333, 334,
                    331, 332, 333, 334,
                    335, 336, 337, 338, 339
                },
                // Ice crossing water
                {
                    {"0111", {199, 200}},
                    {"1011", {201, 202}},
                    {"0011", {203, 204, 205}},
                    {"1101", {206, 207}},
                    {"0101", {208, 209, 210}},
                    {"0001", {212, 213}},
                    {"1110", {214, 215}},
                    {"1010", {217, 218, 219}},
                    {"0010", {220, 221}},
                    {"1100", {222, 223, 224}},
                    {"0100", {225, 226}},
                    {"1000", {227, 228}},
                    {"1001", {174}} //271
                }
            ),
            // Ground
            new Tile(
                1,
                {255, 255, 255},
                // Base ground
                {
                    349, 350, 351,
                    349, 350, 351,
                    349, 350, 351,
                    349, 350, 351,
                    352, 353, 354, 355, 356, 357, 358, 359, 363
                },
                // Ground crossing ice
                {
                    {"0111", {259, 260}},
                    {"1011", {261, 262}},
                    {"0011", {263, 264, 265}},
                    {"1101", {266, 267}},
                    {"0101", {268, 269, 270}},
                    {"0001", {273, 274}},
                    {"1110", {275, 276}},
                    {"1010", {279, 280, 281}},
                    {"0010", {282, 283}},
                    {"1100", {284, 285, 286}},
                    {"0100", {287, 288}},
                    {"1000", {289, 290}},
                    {"1001", {174}} //271
                }
            )
        };

        tiles2 = {
            // Water
            new Tile(
                0,
                {51, 51, 255},
                // Base water
                {
                    319, 320, 321,
                    319, 320, 321,
                    319, 320, 321,
                    319, 320, 321,
                    322, 323, 324
                },
                // Ice crossing water
                {
                    {"1000", {199, 200}},
                    {"0100", {201, 202}},
                    {"1100", {203, 204, 205}},
                    {"0010", {206, 207}},
                    {"1010", {208, 209, 210}},
                    {"1110", {212, 213}},
                    {"0001", {214, 215}},
                    {"0101", {217, 218, 219}},
                    {"1101", {220, 221}},
                    {"0011", {222, 223, 224}},
                    {"1011", {225, 226}},
                    {"0111", {227, 228}},
                    {"0110", {174}} //271
                }                
            ),
            // Ice
            new Tile(
                1,
                {102, 178, 215},
                // Base ice 
                {
                    331, 332, 333, 334,
                    331, 332, 333, 334,
                    331, 332, 333, 334,
                    331, 332, 333, 334,
                    335, 336, 337, 338, 339
                },
                // Ground crossing ice
                {
                    {"1000", {259, 260}},
                    {"0100", {261, 262}},
                    {"1100", {263, 264, 265}},
                    {"0010", {266, 267}},
                    {"1010", {268, 269, 270}},
                    {"1110", {273, 274}},
                    {"0001", {275, 276}},
                    {"0101", {279, 280, 281}},
                    {"1101", {282, 283}},
                    {"0011", {284, 285, 286}},
                    {"1011", {287, 288}},
                    {"0111", {289, 290}},
                    {"0110", {174}} //271
                }
            ),
            // Ground
            new Tile(
                1,
                {255, 255, 255},
                // Base ground
                {
                    349, 350, 351,
                    349, 350, 351,
                    349, 350, 351,
                    349, 350, 351,
                    352, 353, 354, 355, 356, 357, 358, 359, 363
                }
            )
        };

        terrain->tiles = tiles1;
        terrain->setMap(map);
        terrain->setPosition(0, 0);

        objects.push_back(map);
        objects.push_back(terrain);
        objects.push_back(fps);

        generate();
    }

    void generate() {
        srand(clock());
        terrain->generate1(rand(), 0.05, {0.3, 0.55, 1});
        terrain->import(
            {
                {0,1,0,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {1,1,0,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {0,0,0,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {1,1,1,1,0,0,1,1,0,0,0,0,0,1,1,1,1,0,0,0,0},
                {0,0,0,0,0,0,1,1,0,0,0,0,0,1,1,1,1,0,0,0,0},
                {0,0,0,0,0,0,1,1,0,0,0,1,1,1,1,1,1,1,1,0,0},
                {1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,0,0},
                {1,1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,1,1,0,0,0,0},
                {0,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,1,0,0,0,0,1,1,1,1,0,0,0,0},
                {0,0,0,0,0,0,0,1,1,1,0,0,0,1,1,1,1,0,0,0,0},
                {0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,1,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
            }
        );
        terrain->fillMapShrinked();
    }

    virtual void update(State* state) {
        if (SDL_GetTicks()-ticks>500) {
            fps->setText(to_string(state->clock->fps) + " FPS");
            fps->position.x = width-fps->getWidth()-5;
            ticks = SDL_GetTicks();
        }

        Keyboard* keyboard = state->event->keyboard; 

        if (keyboard->down) {
            state->camera->y += 50;
        }
        if (keyboard->up) {
            state->camera->y -= 50;
        }
        if (keyboard->right) {
            state->camera->x += 50;
        }
        if (keyboard->left) {
            state->camera->x -= 50;
        }

        if (keyboard->space) {
            generate();
        }

        Scene::update(state);

    }

    virtual void render(State* state){
        clear();
        process(state);
        display();
    }




};

#endif
